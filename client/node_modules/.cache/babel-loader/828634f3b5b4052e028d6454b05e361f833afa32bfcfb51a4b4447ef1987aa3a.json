{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useValue } from '../context/ContextProvider';\nimport jwtDecode from 'jwt-decode';\nconst useCheckToken = () => {\n  _s();\n  const {\n    state: {\n      currentUser\n    },\n    dispatch\n  } = useValue();\n  useEffect(() => {\n    if (currentUser) {\n      const decodedToken = jwtDecode(currentUser.token);\n      if (decodedToken.exp * 1000 < new Date().getTime()) dispatch({\n        type: 'UPDATE_USER',\n        payload: null\n      });\n    }\n  }, []);\n};\n_s(useCheckToken, \"m/m2pgUClFNxgMUyJg+1pLMKnzU=\", false, function () {\n  return [useValue];\n});\nexport default useCheckToken;","map":{"version":3,"names":["React","useEffect","useValue","jwtDecode","useCheckToken","_s","state","currentUser","dispatch","decodedToken","token","exp","Date","getTime","type","payload"],"sources":["D:/place-to-stay-part6/client/src/hooks/useCheckToken.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useValue } from '../context/ContextProvider';\nimport jwtDecode from 'jwt-decode';\n\nconst useCheckToken = () => {\n  const {\n    state: { currentUser },\n    dispatch,\n  } = useValue();\n  useEffect(() => {\n    if (currentUser) {\n      const decodedToken = jwtDecode(currentUser.token);\n      if (decodedToken.exp * 1000 < new Date().getTime())\n        dispatch({ type: 'UPDATE_USER', payload: null });\n    }\n  }, []);\n};\n\nexport default useCheckToken;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,QAAQ,QAAQ,4BAA4B;AACrD,OAAOC,SAAS,MAAM,YAAY;AAElC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM;IACJC,KAAK,EAAE;MAAEC;IAAY,CAAC;IACtBC;EACF,CAAC,GAAGN,QAAQ,CAAC,CAAC;EACdD,SAAS,CAAC,MAAM;IACd,IAAIM,WAAW,EAAE;MACf,MAAME,YAAY,GAAGN,SAAS,CAACI,WAAW,CAACG,KAAK,CAAC;MACjD,IAAID,YAAY,CAACE,GAAG,GAAG,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,EAChDL,QAAQ,CAAC;QAAEM,IAAI,EAAE,aAAa;QAAEC,OAAO,EAAE;MAAK,CAAC,CAAC;IACpD;EACF,CAAC,EAAE,EAAE,CAAC;AACR,CAAC;AAACV,EAAA,CAZID,aAAa;EAAA,QAIbF,QAAQ;AAAA;AAUd,eAAeE,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}