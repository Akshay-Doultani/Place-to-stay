{"ast":null,"code":"import fetchData from './utils/fetchData';\nconst url = process.env.REACT_APP_SERVER_URL + '/room';\nexport const createRoom = async (room, currentUser, dispatch, setPage) => {\n  dispatch({\n    type: 'START_LOADING'\n  });\n  const result = await fetchData({\n    url,\n    body: room,\n    token: currentUser === null || currentUser === void 0 ? void 0 : currentUser.token\n  }, dispatch);\n  if (result) {\n    dispatch({\n      type: 'UPDATE_ALERT',\n      payload: {\n        open: true,\n        severity: 'success',\n        message: 'The room has been added successfully'\n      }\n    });\n    dispatch({\n      type: 'RESET_ROOM'\n    });\n    setPage(0);\n    dispatch({\n      type: 'UPDATE_ROOM',\n      payload: result\n    });\n  }\n  dispatch({\n    type: 'END_LOADING'\n  });\n};\nexport const getRooms = async dispatch => {\n  const result = await fetchData({\n    url,\n    method: 'GET'\n  }, dispatch);\n  if (result) {\n    dispatch({\n      type: 'UPDATE_ROOMS',\n      payload: result\n    });\n  }\n};\n\n// Function to delete a room\nexport const deleteRoom = async (roomId, currentUser, dispatch) => {\n  const fullUrl = `${url}/${roomId}`;\n  dispatch({\n    type: 'START_LOADING'\n  });\n  const result = await fetchData({\n    url: fullUrl,\n    method: 'DELETE',\n    token: currentUser === null || currentUser === void 0 ? void 0 : currentUser.token\n  }, dispatch);\n  if (result) {\n    dispatch({\n      type: 'UPDATE_ALERT',\n      payload: {\n        open: true,\n        severity: 'success',\n        message: 'Room has been deleted successfully'\n      }\n    });\n    // Optionally, update the state to remove the deleted room\n    dispatch({\n      type: 'REMOVE_ROOM',\n      payload: roomId\n    });\n  }\n  dispatch({\n    type: 'END_LOADING'\n  });\n};","map":{"version":3,"names":["fetchData","url","process","env","REACT_APP_SERVER_URL","createRoom","room","currentUser","dispatch","setPage","type","result","body","token","payload","open","severity","message","getRooms","method","deleteRoom","roomId","fullUrl"],"sources":["D:/place-to-stay-part6/client/src/actions/room.js"],"sourcesContent":["import fetchData from './utils/fetchData';\r\n\r\nconst url = process.env.REACT_APP_SERVER_URL + '/room';\r\n\r\nexport const createRoom = async (room, currentUser, dispatch, setPage) => {\r\n  dispatch({ type: 'START_LOADING' });\r\n\r\n  const result = await fetchData(\r\n    { url, body: room, token: currentUser?.token },\r\n    dispatch\r\n  );\r\n  if (result) {\r\n    dispatch({\r\n      type: 'UPDATE_ALERT',\r\n      payload: {\r\n        open: true,\r\n        severity: 'success',\r\n        message: 'The room has been added successfully',\r\n      },\r\n    });\r\n    dispatch({ type: 'RESET_ROOM' });\r\n    setPage(0);\r\n    dispatch({ type: 'UPDATE_ROOM', payload: result });\r\n  }\r\n\r\n  dispatch({ type: 'END_LOADING' });\r\n};\r\n\r\nexport const getRooms = async (dispatch) => {\r\n  const result = await fetchData({ url, method: 'GET' }, dispatch);\r\n  if (result) {\r\n    dispatch({ type: 'UPDATE_ROOMS', payload: result });\r\n  }\r\n};\r\n\r\n\r\n// Function to delete a room\r\nexport const deleteRoom = async (roomId, currentUser, dispatch) => {\r\n  const fullUrl = `${url}/${roomId}`;\r\n\r\n  dispatch({ type: 'START_LOADING' });\r\n\r\n  const result = await fetchData(\r\n    { url: fullUrl, method: 'DELETE', token: currentUser?.token },\r\n    dispatch\r\n  );\r\n  \r\n  if (result) {\r\n    dispatch({\r\n      type: 'UPDATE_ALERT',\r\n      payload: {\r\n        open: true,\r\n        severity: 'success',\r\n        message: 'Room has been deleted successfully',\r\n      },\r\n    });\r\n    // Optionally, update the state to remove the deleted room\r\n    dispatch({ type: 'REMOVE_ROOM', payload: roomId });\r\n  }\r\n\r\n  dispatch({ type: 'END_LOADING' });\r\n};"],"mappings":"AAAA,OAAOA,SAAS,MAAM,mBAAmB;AAEzC,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,GAAG,OAAO;AAEtD,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,IAAI,EAAEC,WAAW,EAAEC,QAAQ,EAAEC,OAAO,KAAK;EACxED,QAAQ,CAAC;IAAEE,IAAI,EAAE;EAAgB,CAAC,CAAC;EAEnC,MAAMC,MAAM,GAAG,MAAMX,SAAS,CAC5B;IAAEC,GAAG;IAAEW,IAAI,EAAEN,IAAI;IAAEO,KAAK,EAAEN,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEM;EAAM,CAAC,EAC9CL,QACF,CAAC;EACD,IAAIG,MAAM,EAAE;IACVH,QAAQ,CAAC;MACPE,IAAI,EAAE,cAAc;MACpBI,OAAO,EAAE;QACPC,IAAI,EAAE,IAAI;QACVC,QAAQ,EAAE,SAAS;QACnBC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;IACFT,QAAQ,CAAC;MAAEE,IAAI,EAAE;IAAa,CAAC,CAAC;IAChCD,OAAO,CAAC,CAAC,CAAC;IACVD,QAAQ,CAAC;MAAEE,IAAI,EAAE,aAAa;MAAEI,OAAO,EAAEH;IAAO,CAAC,CAAC;EACpD;EAEAH,QAAQ,CAAC;IAAEE,IAAI,EAAE;EAAc,CAAC,CAAC;AACnC,CAAC;AAED,OAAO,MAAMQ,QAAQ,GAAG,MAAOV,QAAQ,IAAK;EAC1C,MAAMG,MAAM,GAAG,MAAMX,SAAS,CAAC;IAAEC,GAAG;IAAEkB,MAAM,EAAE;EAAM,CAAC,EAAEX,QAAQ,CAAC;EAChE,IAAIG,MAAM,EAAE;IACVH,QAAQ,CAAC;MAAEE,IAAI,EAAE,cAAc;MAAEI,OAAO,EAAEH;IAAO,CAAC,CAAC;EACrD;AACF,CAAC;;AAGD;AACA,OAAO,MAAMS,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEd,WAAW,EAAEC,QAAQ,KAAK;EACjE,MAAMc,OAAO,GAAG,GAAGrB,GAAG,IAAIoB,MAAM,EAAE;EAElCb,QAAQ,CAAC;IAAEE,IAAI,EAAE;EAAgB,CAAC,CAAC;EAEnC,MAAMC,MAAM,GAAG,MAAMX,SAAS,CAC5B;IAAEC,GAAG,EAAEqB,OAAO;IAAEH,MAAM,EAAE,QAAQ;IAAEN,KAAK,EAAEN,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEM;EAAM,CAAC,EAC7DL,QACF,CAAC;EAED,IAAIG,MAAM,EAAE;IACVH,QAAQ,CAAC;MACPE,IAAI,EAAE,cAAc;MACpBI,OAAO,EAAE;QACPC,IAAI,EAAE,IAAI;QACVC,QAAQ,EAAE,SAAS;QACnBC,OAAO,EAAE;MACX;IACF,CAAC,CAAC;IACF;IACAT,QAAQ,CAAC;MAAEE,IAAI,EAAE,aAAa;MAAEI,OAAO,EAAEO;IAAO,CAAC,CAAC;EACpD;EAEAb,QAAQ,CAAC;IAAEE,IAAI,EAAE;EAAc,CAAC,CAAC;AACnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}